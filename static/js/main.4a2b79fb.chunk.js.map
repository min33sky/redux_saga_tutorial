{"version":3,"sources":["serviceWorker.js","store/modules/counter.js","store/modules/post.js","store/modules/input.js","store/modules/index.js","store/configureStore.js","components/App.js","Root.js","index.js"],"names":["Boolean","window","location","hostname","match","incrementAsyncSaga","decrementAsyncSaga","counterSaga","INCREMENT_ASYNC","DECREMENT_ASYNC","increment","createAction","decrement","incrementAsync","decrementAsync","regenerator_default","a","wrap","_context","prev","next","delay","console","log","put","stop","_marked","_context2","_marked2","_context3","takeEvery","_marked3","handleActions","_handleActions","Object","defineProperty","state","action","produce","draft","value","getPostSaga","postSaga","getPostAPI","postId","axios","get","concat","GET_POST","GET_POST_SUCCESS","GET_POST_FAILURE","getPost","something","data","title","body","response","call","payload","sent","type","t0","post_marked","post_marked2","_action$payload$data","setInputAsyncSaga","inputSaga","SET_INPUT_ASYNC","setInput","setInputAsync","input_marked","input_marked2","rootSaga","all","modules_marked","combineReducers","counter","input","post","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","modules","applyMiddleware","run","App","handleIncrement","_this","props","CounterActions","handleDecrement","handleChange","e","InputActions","target","_this$props","this","number","PostActions","prevProps","prevState","_this$props2","_this$props3","react_default","createElement","Fragment","onChange","onClick","Component","connect","dispatch","bindActionCreators","counterActions","postActions","inputActions","configureStore","Root","es","components_App","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a2b79fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import produce from 'immer';\r\nimport { put, takeEvery, delay } from 'redux-saga/effects';\r\nimport { handleActions, createAction } from 'redux-actions';\r\n\r\nconst INCREMENT = 'counter/INCREMENT';\r\nconst DECREMENT = 'counter/DECREMENT';\r\nconst INCREMENT_ASYNC = 'counter/INCREMENT_ASYNC';\r\nconst DECREMENT_ASYNC = 'counter/DECREMENT_ASYNC';\r\n\r\nexport const increment = createAction(INCREMENT);\r\nexport const decrement = createAction(DECREMENT);\r\nexport const incrementAsync = createAction(INCREMENT_ASYNC);\r\nexport const decrementAsync = createAction(DECREMENT_ASYNC);\r\n\r\nconst initialState = {\r\n  value: 1,\r\n};\r\n\r\nfunction* incrementAsyncSaga() {\r\n  yield delay(1000);\r\n  console.log('증가');\r\n  yield put(increment()); // put: 액션을 스토어로 디스패치한다.\r\n}\r\n\r\nfunction* decrementAsyncSaga() {\r\n  yield delay(1000);\r\n  console.log('감소');\r\n  yield put(decrement());\r\n}\r\n\r\nexport function* counterSaga() {\r\n  // takeEvery: 특정 액션을 모니터링하고, 발생하면 특정 함수를 발생시킨다.\r\n  yield takeEvery(INCREMENT_ASYNC, incrementAsyncSaga);\r\n  yield takeEvery(DECREMENT_ASYNC, decrementAsyncSaga);\r\n}\r\n\r\nexport default handleActions(\r\n  {\r\n    [INCREMENT]: (state, action) =>\r\n      produce(state, draft => {\r\n        draft.value = draft.value + 1;\r\n      }),\r\n    [DECREMENT]: (state, action) =>\r\n      produce(state, draft => {\r\n        draft.value = draft.value - 1;\r\n      }),\r\n  },\r\n  initialState,\r\n);\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport axios from 'axios';\r\nimport produce from 'immer';\r\nimport { call, put, takeEvery } from 'redux-saga/effects';\r\n\r\nfunction getPostAPI(postId) {\r\n  return axios.get(`https://jsonplaceholder.typicode.com/posts/${postId}`);\r\n}\r\n\r\nconst GET_POST = 'post/GET_POST';\r\nconst GET_POST_SUCCESS = 'post/GET_POST_SUCCESS';\r\nconst GET_POST_FAILURE = 'post/GET_POST_FAILURE';\r\n\r\nexport const getPost = createAction(GET_POST, postId => postId);\r\n\r\nconst initialState = {\r\n  data: {\r\n    title: '',\r\n    body: '',\r\n  },\r\n};\r\n\r\nconst something = () => ({\r\n  data: {\r\n    title: 'hello',\r\n    body: 'world',\r\n  },\r\n});\r\n\r\nfunction* getPostSaga(action) {\r\n  // call: 첫번째 파라미터로 전달한 함수에 그 뒤에 있는 파라미터들을 전달하여 호출\r\n  // 이를 사용하면 나중에 테스트를 작성하게 될 때 용이하다.\r\n  console.log(call(something, ''));\r\n\r\n  try {\r\n    const response = yield call(getPostAPI, action.payload);\r\n    console.log(response);\r\n    yield put({ type: GET_POST_SUCCESS, payload: response });\r\n  } catch (error) {\r\n    yield put({ type: GET_POST_FAILURE, payload: error });\r\n  }\r\n}\r\n\r\nexport function* postSaga() {\r\n  yield takeEvery(GET_POST, getPostSaga);\r\n}\r\n\r\nexport default handleActions(\r\n  {\r\n    [GET_POST_SUCCESS]: (state, action) =>\r\n      produce(state, draft => {\r\n        const { title, body } = action.payload.data;\r\n        draft.data.title = title;\r\n        draft.data.body = body;\r\n      }),\r\n  },\r\n  initialState,\r\n);\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport { put, takeEvery, delay } from 'redux-saga/effects';\r\nimport produce from 'immer';\r\n\r\nconst SET_INPUT = 'input/SET_INPUT';\r\nconst SET_INPUT_ASYNC = 'input/SET_INPUT_ASYNC';\r\n\r\nexport const setInput = createAction(SET_INPUT, value => value);\r\nexport const setInputAsync = createAction(SET_INPUT_ASYNC, value => value);\r\n\r\nconst initialState = {\r\n  value: '',\r\n};\r\n\r\nfunction* setInputAsyncSaga(action) {\r\n  yield delay(1000);\r\n  yield put(setInput(action.payload));\r\n}\r\n\r\nexport function* inputSaga() {\r\n  yield takeEvery(SET_INPUT_ASYNC, setInputAsyncSaga);\r\n}\r\n\r\nexport default handleActions(\r\n  {\r\n    [SET_INPUT]: (state, action) =>\r\n      produce(state, draft => {\r\n        draft.value = action.payload;\r\n      }),\r\n  },\r\n  initialState,\r\n);\r\n","import { combineReducers } from 'redux';\r\nimport counter, { counterSaga } from './counter';\r\nimport post, { postSaga } from './post';\r\nimport input, { inputSaga } from './input';\r\nimport { all } from 'redux-saga/effects';\r\n\r\n// 여러개의 saga를 합친다.\r\nexport function* rootSaga() {\r\n  yield all([counterSaga(), postSaga(), inputSaga()]);\r\n}\r\n\r\nexport default combineReducers({\r\n  counter,\r\n  input,\r\n  post,\r\n});\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport modules, { rootSaga } from './modules';\r\n\r\nconst sagaMiddleware = createSagaMiddleware(); // 리덕스 사가 미들웨어\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  modules,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware)),\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as counterActions from 'store/modules/counter';\r\nimport * as postActions from 'store/modules/post';\r\nimport * as inputActions from 'store/modules/input';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    const { number, PostActions } = this.props;\r\n    PostActions.getPost(number);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { number, PostActions } = this.props;\r\n    if (prevProps.number !== this.props.number) {\r\n      PostActions.getPost(number);\r\n    }\r\n  }\r\n\r\n  handleIncrement = () => {\r\n    const { CounterActions } = this.props;\r\n    CounterActions.incrementAsync();\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    const { CounterActions } = this.props;\r\n    CounterActions.decrementAsync();\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { InputActions } = this.props;\r\n    const { value } = e.target;\r\n\r\n    InputActions.setInputAsync(value);\r\n  };\r\n\r\n  render() {\r\n    const { number, post, input } = this.props;\r\n    const { handleIncrement, handleDecrement, handleChange } = this;\r\n    return (\r\n      <>\r\n        <input type=\"text\" value={input || ''} onChange={handleChange} />\r\n        <div>숫자 : {number}</div>\r\n        <button onClick={handleDecrement}>감소</button>\r\n        <button onClick={handleIncrement}>증가</button>\r\n        <div>\r\n          <h1>{post.title}</h1>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    number: state.counter.value,\r\n    post: state.post.data,\r\n    input: state.input.value,\r\n  }),\r\n  dispatch => ({\r\n    CounterActions: bindActionCreators(counterActions, dispatch),\r\n    PostActions: bindActionCreators(postActions, dispatch),\r\n    InputActions: bindActionCreators(inputActions, dispatch),\r\n  }),\r\n)(App);\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from 'store/configureStore';\r\nimport App from 'components/App';\r\n\r\nconst store = configureStore;\r\n\r\nconst Root = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Root;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Root from 'Root';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}